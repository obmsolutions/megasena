<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mega Sena Power Tool Pro</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        h1, h2, h3 {
            color: #0066cc;
        }
        .container {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .tabs {
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            background-color: #ddd;
            border-radius: 5px 5px 0 0;
            margin-right: 5px;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .tab.active {
            background-color: #0066cc;
            color: white;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .number-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(40px, 1fr));
            gap: 5px;
            margin: 15px 0;
        }
        .number-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 1px solid #ddd;
            background-color: #f8f8f8;
            color: #666;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            transition: all 0.3s;
        }
        .number-btn.selected {
            background-color: #3b82f6;
            color: white;
            font-weight: bold;
            border-color: #2563eb;
        }
        .filter-section {
            margin: 15px 0;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .filter-options {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }
        .filter-option {
            padding: 8px 12px;
            background-color: #f0f0f0;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }
        .filter-option.selected {
            background-color: #3b82f6;
            color: white;
        }
        button {
            padding: 10px 15px;
            background-color: #0066cc;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
            font-weight: bold;
            font-size: 14px;
        }
        button:hover:not(:disabled) {
            background-color: #0055aa;
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        #results {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
            max-height: 300px;
            overflow-y: auto;
        }
        .result-item {
            margin: 5px 0;
            padding: 5px;
            border-bottom: 1px solid #eee;
        }
        .number-ball {
            display: inline-block;
            width: 30px;
            height: 30px;
            line-height: 30px;
            border-radius: 50%;
            background-color: #e5e7eb;
            color: #1f2937;
            text-align: center;
            font-weight: bold;
            font-size: 12px;
            margin: 2px;
        }
        .number-ball.match {
            background-color: #10b981;
            color: white;
        }
        .number-ball.hot {
            background-color: #ef4444;
            color: white;
        }
        .number-ball.cold {
            background-color: #3b82f6;
            color: white;
        }
        .hidden {
            display: none;
        }
        .error-message, .success-message {
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            font-size: 14px;
        }
        .error-message {
            color: #d32f2f;
            background-color: #ffebee;
        }
        .success-message {
            color: #2e7d32;
            background-color: #e8f5e9;
        }
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(0,0,0,.3);
            border-radius: 50%;
            border-top-color: #0066cc;
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
            vertical-align: middle;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        #fileInfo {
            margin: 10px 0;
            font-style: italic;
            color: #666;
            font-size: 14px;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 10px;
            margin: 15px 0;
        }
        .stat-item {
            padding: 10px;
            border-radius: 8px;
            text-align: center;
        }
        .stat-count {
            font-size: 18px;
            font-weight: bold;
            display: block;
        }
        .result-badge {
            padding: 2px 5px;
            border-radius: 3px;
            font-weight: bold;
            margin-left: 10px;
            font-size: 12px;
        }
        .sena { background-color: #4CAF50; color: white; }
        .quina { background-color: #2196F3; color: white; }
        .quadra { background-color: #ff9800; color: white; }
        .terno { background-color: #9C27B0; color: white; }
        .duque { background-color: #607D8B; color: white; }
        .as { background-color: #8B4513; color: white; }
        .zero { background-color: #e0e0e0; color: #666; }
        @media screen and (max-width: 768px) {
            .number-grid {
                grid-template-columns: repeat(auto-fit, minmax(35px, 1fr));
            }
            .tab {
                flex: 1 1 auto;
                text-align: center;
                margin-bottom: 5px;
            }
        }
        @media screen and (max-width: 480px) {
            .number-grid {
                grid-template-columns: repeat(auto-fit, minmax(30px, 1fr));
            }
            .filter-options {
                flex-direction: column;
            }
            .filter-option {
                width: 100%;
                text-align: center;
            }
            .number-ball {
                width: 25px;
                height: 25px;
                line-height: 25px;
                font-size: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Mega Sena Power Tool Pro</h1>

        <div class="tabs">
            <div class="tab active" onclick="openTab('tab1')">Seleção</div>
            <div class="tab" onclick="openTab('tab2')">Desdobramento</div>
            <div class="tab" onclick="openTab('tab3')">Filtros</div>
            <div class="tab" onclick="openTab('tab4')">Resultados</div>
            <div class="tab" onclick="openTab('tab5')">Conferir</div>
            <div class="tab" onclick="openTab('tab6')">Estatísticas</div>
        </div>

        <div id="tab1" class="tab-content active">
            <h2>Selecione suas dezenas (6-40 números)</h2>
            <div class="number-grid" id="numberGrid"></div>
            <div>
                <button onclick="selectRandom(6)">Selecionar 6</button>
                <button onclick="selectRandom(10)">Selecionar 10</button>
                <button onclick="selectRandom(15)">Selecionar 15</button>
                <button onclick="selectRandom(20)">Selecionar 20</button>
                <button onclick="selectRandom(25)">Selecionar 25</button>
                <button onclick="selectRandom(30)">Selecionar 30</button>
                <button onclick="selectRandom(40)">Selecionar 40</button>
                <button onclick="clearSelection()">Limpar</button>
            </div>
            <div>
                <p>Dezenas selecionadas: <span id="selectedCount">0</span></p>
                <div id="selectedNumbers"></div>
            </div>
        </div>

        <div id="tab2" class="tab-content">
            <h2>Configuração de Desdobramento</h2>
            <div>
                <label for="combinationsCount">Número de combinações:</label>
                <input type="number" id="combinationsCount" min="1" max="1000" value="100">
            </div>
            <div>
                <button id="generateButton" onclick="generateCombinations()">Gerar Combinações</button>
            </div>
            <div id="generationStats"></div>
        </div>

        <div id="tab3" class="tab-content">
            <h2>Filtros Estatísticos</h2>

            <div class="filter-section">
                <h3>Filtro 1: Par/Ímpar</h3>
                <p>Distribuição mais comum: 3 pares e 3 ímpares</p>
                <div class="filter-options" id="parImparOptions">
                    <div class="filter-option selected" data-value="3-3">3P-3I</div>
                    <div class="filter-option" data-value="2-4">2P-4I</div>
                    <div class="filter-option" data-value="4-2">4P-2I</div>
                    <div class="filter-option" data-value="1-5">1P-5I</div>
                    <div class="filter-option" data-value="5-1">5P-1I</div>
                    <div class="filter-option" data-value="0-6">0P-6I</div>
                    <div class="filter-option" data-value="6-0">6P-0I</div>
                </div>
            </div>

            <div class="filter-section">
                <h3>Filtro 2: Soma das Dezenas</h3>
                <p>30,8%: 186-226 | 24,4%: 145-185 | 24,2%: 227-267 | 9,4%: 104-144</p>
                <div class="filter-options" id="somaOptions">
                    <div class="filter-option selected" data-value="186-226">186-226</div>
                    <div class="filter-option selected" data-value="145-185">145-185</div>
                    <div class="filter-option" data-value="227-267">227-267</div>
                    <div class="filter-option" data-value="104-144">104-144</div>
                </div>
            </div>

            <div class="filter-section">
                <h3>Filtro 3: Dezenas Repetidas</h3>
                <p>42,5%: 0 repetida | 52,5%: 1 repetida | 2,5%: 2+ repetidas</p>
                <div class="filter-options" id="repetidasOptions">
                    <div class="filter-option" data-value="0">0 repetida</div>
                    <div class="filter-option selected" data-value="1">1 repetida</div>
                    <div class="filter-option" data-value="2">2+ repetidas</div>
                </div>
            </div>

            <div class="filter-section">
                <h3>Filtro 4: Fibonacci</h3>
                <p>35%: 0 | 35%: 1 | 27,5%: 2 | 2,5%: 3</p>
                <div class="filter-options" id="fibonacciOptions">
                    <div class="filter-option" data-value="0">0 Fibonacci</div>
                    <div class="filter-option selected" data-value="1">1 Fibonacci</div>
                    <div class="filter-option selected" data-value="2">2 Fibonacci</div>
                    <div class="filter-option" data-value="3">3 Fibonacci</div>
                </div>
            </div>

            <div class="filter-section">
                <h3>Filtro 5: Números Primos</h3>
                <p>10%: 0 | 47,5%: 1 | 27,5%: 2 | 12,5%: 3 | 2,5%: 4</p>
                <div class="filter-options" id="primosOptions">
                    <div class="filter-option" data-value="0">0 primo</div>
                    <div class="filter-option selected" data-value="1">1 primo</div>
                    <div class="filter-option selected" data-value="2">2 primos</div>
                    <div class="filter-option" data-value="3">3 primos</div>
                    <div class="filter-option" data-value="4">4 primos</div>
                </div>
            </div>

            <div class="filter-section">
                <h3>Filtro 6: Moldura</h3>
                <p>30%: 3+ | 27,5%: 4 | 27,5%: 2 | 10%: 1</p>
                <div class="filter-options" id="molduraOptions">
                    <div class="filter-option selected" data-value="3">3+ moldura</div>
                    <div class="filter-option" data-value="4">4 moldura</div>
                    <div class="filter-option" data-value="2">2 moldura</div>
                    <div class="filter-option" data-value="1">1 moldura</div>
                </div>
            </div>

            <div class="filter-section">
                <h3>Filtro 7: Miolo</h3>
                <p>30%: 3+ | 27,5%: 4 | 27,5%: 2 | 5%: 1</p>
                <div class="filter-options" id="mioloOptions">
                    <div class="filter-option selected" data-value="3">3+ miolo</div>
                    <div class="filter-option" data-value="4">4 miolo</div>
                    <div class="filter-option" data-value="2">2 miolo</div>
                    <div class="filter-option" data-value="1">1 miolo</div>
                </div>
            </div>

            <div class="filter-section">
                <h3>Filtro 8: Múltiplos de 3</h3>
                <p>42,5%: 2 | 35%: 1 | 17,5%: 3 | 2,5%: 0 ou 4</p>
                <div class="filter-options" id="multiplos3Options">
                    <div class="filter-option selected" data-value="2">2 múltiplos</div>
                    <div class="filter-option" data-value="1">1 múltiplo</div>
                    <div class="filter-option" data-value="3">3 múltiplos</div>
                    <div class="filter-option" data-value="0">0 múltiplos</div>
                    <div class="filter-option" data-value="4">4 múltiplos</div>
                </div>
            </div>

            <div class="filter-section">
                <h3>Filtro 9: Quadrantes</h3>
                <p>Normalmente as dezenas estão distribuídas em 3-4 quadrantes</p>
                <div class="filter-options" id="quadrantesOptions">
                    <div class="filter-option selected" data-value="3">3 quadrantes</div>
                    <div class="filter-option selected" data-value="4">4 quadrantes</div>
                    <div class="filter-option" data-value="2">2 quadrantes</div>
                </div>
            </div>

            <div>
                <button id="applyFiltersButton" onclick="applyFilters()">Aplicar Filtros</button>
                <button onclick="resetFilters()">Resetar Filtros</button>
            </div>
        </div>

        <div id="tab4" class="tab-content">
            <h2>Resultados</h2>
            <div>
                <p>Combinações filtradas: <span id="filteredCount">0</span></p>
                <button onclick="exportToTxt()">Exportar para TXT</button>
            </div>
            <div id="results"></div>
        </div>

        <div id="tab5" class="tab-content">
            <h2>Conferir Sorteio</h2>
            <div>
                <input type="file" id="fileInput" accept=".txt" class="hidden" onchange="updateFileInfo()">
                <button onclick="document.getElementById('fileInput').click()">Carregar Jogos</button>
                <span id="fileInfo">Nenhum arquivo selecionado</span>
            </div>
            <div>
                <label for="drawNumber">Número do Concurso:</label>
                <input type="number" id="drawNumber" placeholder="Deixe em branco para o último">
                <button id="checkButton" onclick="checkResults()">Conferir</button>
            </div>
            <div id="checkResults" class="hidden">
                <h3>Resultado do Sorteio:</h3>
                <div id="drawResultDisplay"></div>
                <h3>Estatísticas:</h3>
                <div id="resultSummary"></div>
                <div>
                    <button onclick="exportToPDF()">Exportar para PDF</button>
                    <button onclick="exportToTxtCheck()">Exportar para TXT</button>
                </div>
                <h3>Detalhes dos Jogos:</h3>
                <div id="detailedResults"></div>
            </div>
            <div id="errorContainer" class="hidden"></div>
        </div>

        <div id="tab6" class="tab-content">
            <h2>Estatísticas e Análises</h2>
            <div>
                <h3>Números Quentes e Frios</h3>
                <p>Quentes (vermelho): Mais sorteados | Frios (azul): Menos sorteados</p>
                <div id="hotColdNumbers" class="number-grid"></div>
            </div>
            <div>
                <h3>Frequência dos Números</h3>
                <canvas id="frequencyChart"></canvas>
            </div>
            <div>
                <h3>Análise de Padrões</h3>
                <div id="patternAnalysis"></div>
            </div>
        </div>
    </div>

    <script>
        // Constantes para os filtros
        const FIBONACCI_NUMBERS = [2, 3, 5, 8, 13, 21, 34, 55];
        const PRIME_NUMBERS = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59];
        const MOLDURA_NUMBERS = [1,2,3,4,5,6,7,8,9,10,11,21,31,41,51,52,53,54,55,56,57,58,59,60,20,30,40,50];
        const MIOLO_NUMBERS = [12,13,14,15,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49];
        const QUADRANT_1 = [1,2,3,4,5,11,12,13,14,15,21,22,23,24,25];
        const QUADRANT_2 = [6,7,8,9,10,16,17,18,19,20,26,27,28,29,30];
        const QUADRANT_3 = [31,32,33,34,35,41,42,43,44,45,51,52,53,54,55];
        const QUADRANT_4 = [36,37,38,39,40,46,47,48,49,50,56,57,58,59,60];

        // Variáveis globais
        let selectedNumbers = [];
        let allCombinations = [];
        let filteredCombinations = [];
        let historicalData = [];
        let lastDrawNumbers = [];
        let currentResults = [];
        let numberFrequencies = Array(61).fill(0);

        // Inicialização
        document.addEventListener('DOMContentLoaded', () => {
            createNumberGrid();
            setupFilterOptions();
            initializeFilterStyles();
            loadLastDraws();
        });

        function openTab(tabId) {
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.getElementById(tabId).classList.add('active');
            document.querySelector(`.tab[onclick="openTab('${tabId}')"]`).classList.add('active');
        }

        function createNumberGrid() {
            const grid = document.getElementById('numberGrid');
            grid.innerHTML = '';
            for (let i = 1; i <= 60; i++) {
                const btn = document.createElement('button');
                btn.className = 'number-btn';
                btn.textContent = i.toString().padStart(2, '0');
                btn.dataset.number = i;
                btn.addEventListener('click', () => toggleNumberSelection(i));
                grid.appendChild(btn);
            }
            updateSelectedNumbersDisplay();
        }

        function toggleNumberSelection(number) {
            const index = selectedNumbers.indexOf(number);
            if (index === -1) {
                if (selectedNumbers.length >= 40) {
                    showError('Máximo de 40 números permitidos!');
                    return;
                }
                selectedNumbers.push(number);
            } else {
                selectedNumbers.splice(index, 1);
            }
            updateSelectedNumbersDisplay();
        }

        function updateSelectedNumbersDisplay() {
            document.querySelectorAll('.number-btn').forEach(btn => {
                const num = parseInt(btn.dataset.number);
                btn.classList.toggle('selected', selectedNumbers.includes(num));
            });
            document.getElementById('selectedCount').textContent = selectedNumbers.length;
            document.getElementById('selectedNumbers').textContent = selectedNumbers.sort((a, b) => a - b).map(n => n.toString().padStart(2, '0')).join(', ');
        }

        function clearSelection() {
            selectedNumbers = [];
            updateSelectedNumbersDisplay();
            showSuccess('Seleção limpa!');
        }

        function selectRandom(count) {
            if (count < 6 || count > 40) {
                showError('Selecione entre 6 e 40 números!');
                return;
            }
            clearSelection();
            const numbers = Array.from({length: 60}, (_, i) => i + 1);
            selectedNumbers = numbers.sort(() => Math.random() - 0.5).slice(0, count).sort((a, b) => a - b);
            updateSelectedNumbersDisplay();
            showSuccess(`${count} números selecionados aleatoriamente!`);
        }

        function setupFilterOptions() {
            document.querySelectorAll('.filter-options').forEach(container => {
                container.querySelectorAll('.filter-option').forEach(option => {
                    option.addEventListener('click', function() {
                        this.classList.toggle('selected');
                    });
                });
            });
        }

        function initializeFilterStyles() {
            document.querySelectorAll('.filter-option.selected').forEach(option => {
                option.classList.add('selected');
            });
        }

        async function loadLastDraws() {
            try {
                const response = await fetch('https://servicebus2.caixa.gov.br/portaldeloterias/api/megasena/');
                if (!response.ok) throw new Error('Erro ao carregar dados');
                const data = await response.json();
                historicalData = [data];
                lastDrawNumbers = data.listaDezenas.map(Number);
                await loadPreviousDraws(data.numero, 50);
                updateNumberFrequencies();
                displayHotColdNumbers();
                displayFrequencyChart();
                displayPatternAnalysis();
            } catch (error) {
                console.error('Erro ao carregar sorteios:', error);
                historicalData = [{
                    numero: 1234,
                    dataApuracao: "2023-11-30",
                    listaDezenas: ["04", "05", "10", "23", "35", "56"]
                }];
                lastDrawNumbers = historicalData[0].listaDezenas.map(Number);
                updateNumberFrequencies();
                displayHotColdNumbers();
                displayFrequencyChart();
                displayPatternAnalysis();
                showError('Não foi possível carregar os sorteios da Caixa. Usando dados de exemplo.');
            }
        }

        async function loadPreviousDraws(currentDraw, count) {
            try {
                for (let i = 1; i < count; i++) {
                    const drawNumber = currentDraw - i;
                    if (drawNumber <= 0) break;
                    const response = await fetch(`https://servicebus2.caixa.gov.br/portaldeloterias/api/megasena/${drawNumber}`);
                    if (!response.ok) continue;
                    const data = await response.json();
                    historicalData.push(data);
                }
                historicalData.sort((a, b) => b.numero - a.numero);
            } catch (error) {
                console.error('Erro ao carregar concursos anteriores:', error);
            }
        }

        function updateNumberFrequencies() {
            numberFrequencies = Array(61).fill(0);
            historicalData.forEach(draw => {
                draw.listaDezenas.forEach(num => {
                    numberFrequencies[parseInt(num)]++;
                });
            });
        }

        function displayHotColdNumbers() {
            const frequencies = numberFrequencies.slice(1).map((freq, idx) => ({ num: idx + 1, freq }));
            frequencies.sort((a, b) => b.freq - a.freq);
            const hot = frequencies.slice(0, 10).map(f => f.num);
            const cold = frequencies.slice(-10).reverse().map(f => f.num);
            const grid = document.getElementById('hotColdNumbers');
            grid.innerHTML = '';
            for (let i = 1; i <= 60; i++) {
                const btn = document.createElement('span');
                btn.className = `number-ball ${hot.includes(i) ? 'hot' : ''} ${cold.includes(i) ? 'cold' : ''}`;
                btn.textContent = i.toString().padStart(2, '0');
                grid.appendChild(btn);
            }
        }

        function displayFrequencyChart() {
            const ctx = document.getElementById('frequencyChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Array.from({length: 60}, (_, i) => (i + 1).toString().padStart(2, '0')),
                    datasets: [{
                        label: 'Frequência',
                        data: numberFrequencies.slice(1),
                        backgroundColor: '#3b82f6',
                        borderColor: '#2563eb',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: { beginAtZero: true, title: { display: true, text: 'Frequência' } },
                        x: { title: { display: true, text: 'Número' } }
                    }
                }
            });
        }

        function displayPatternAnalysis() {
            const analysis = [];
            const sums = historicalData.map(d => d.listaDezenas.reduce((sum, n) => sum + parseInt(n), 0));
            const avgSum = sums.reduce((a, b) => a + b, 0) / sums.length;
            const consecutives = historicalData.filter(d => {
                const nums = d.listaDezenas.map(Number).sort((a, b) => a - b);
                return nums.some((n, i) => i > 0 && nums[i - 1] == n - 1);
            }).length;
            analysis.push(`Soma média das dezenas: ${avgSum.toFixed(1)}`);
            analysis.push(`Percentual de jogos com números consecutivos: ${(consecutives / historicalData.length * 100).toFixed(1)}%`);
            document.getElementById('patternAnalysis').innerHTML = analysis.map(line => `<p>${line}</p>`).join('');
        }

        function combinations(n, k) {
            if (k > n) return 0;
            let result = 1;
            for (let i = 0; i < k; i++) {
                result *= (n - i) / (i + 1);
            }
            return Math.round(result);
        }

        function generateAllCombinations(numbers, k) {
            const results = [];
            function combine(start, combo) {
                if (combo.length === k) {
                    results.push([...combo].sort((a, b) => a - b));
                    return;
                }
                for (let i = start; i < numbers.length; i++) {
                    combine(i + 1, [...combo, numbers[i]]);
                }
            }
            combine(0, []);
            return results;
        }

        async function generateCombinations() {
            const generateButton = document.getElementById('generateButton');
            const originalText = generateButton.innerHTML;
            generateButton.innerHTML = '<span class="loading"></span> Gerando...';
            generateButton.disabled = true;

            try {
                if (selectedNumbers.length < 6) {
                    showError('Selecione pelo menos 6 números!');
                    return;
                }
                const count = parseInt(document.getElementById('combinationsCount').value);
                if (isNaN(count) || count < 1 || count > 1000) {
                    showError('Informe um número válido de combinações (1-1000)!');
                    return;
                }
                const maxCombinations = combinations(selectedNumbers.length, 6);
                if (count > maxCombinations) {
                    showError(`O número de combinações solicitado (${count}) excede o máximo possível (${maxCombinations}).`);
                    return;
                }

                allCombinations = [];
                const sortedNumbers = [...selectedNumbers].sort((a, b) => a - b);
                let allPossible = generateAllCombinations(sortedNumbers, 6);
                allPossible = allPossible.sort(() => Math.random() - 0.5);
                allCombinations = allPossible.slice(0, count);
                filteredCombinations = [...allCombinations];
                updateResultsDisplay();
                document.getElementById('generationStats').innerHTML = `<p>Geradas ${allCombinations.length} combinações.</p>`;
                showSuccess('Combinações geradas com sucesso!');
                openTab('tab4');
            } catch (error) {
                showError('Erro ao gerar combinações: ' + error.message);
            } finally {
                generateButton.innerHTML = originalText;
                generateButton.disabled = false;
            }
        }

        async function applyFilters() {
            const applyButton = document.getElementById('applyFiltersButton');
            const originalText = applyButton.innerHTML;
            applyButton.innerHTML = '<span class="loading"></span> Aplicando...';
            applyButton.disabled = true;

            try {
                if (allCombinations.length === 0) {
                    showError('Gere combinações primeiro!');
                    return;
                }
                filteredCombinations = allCombinations.filter(combo => {
                    const pares = combo.filter(num => num % 2 === 0).length;
                    const parImparKey = `${pares}-${6 - pares}`;
                    if (getSelectedOptions('parImparOptions').length > 0 && !getSelectedOptions('parImparOptions').includes(parImparKey)) {
                        return false;
                    }

                    const soma = combo.reduce((a, b) => a + b, 0);
                    let somaMatch = false;
                    for (const range of getSelectedOptions('somaOptions')) {
                        const [min, max] = range.split('-').map(Number);
                        if (soma >= min && soma <= max) {
                            somaMatch = true;
                            break;
                        }
                    }
                    if (getSelectedOptions('somaOptions').length > 0 && !somaMatch) {
                        return false;
                    }

                    if (lastDrawNumbers.length === 6 && getSelectedOptions('repetidasOptions').length > 0) {
                        const repetidas = combo.filter( num => lastDrawNumbers.includes(num)).length;
                        let repetidasMatch = false;
                        for (const filter of getSelectedOptions('repetidasOptions')) {
                            const filterNum = parseInt(filter);
                            if ((filterNum === 2 && repetidas >= 2) || repetidas === filterNum) {
                                repetidasMatch = true;
                                break;
                            }
                        }
                        if (!repetidasMatch) {
                            return false;
                        }
                    }

                    const fibonacciCount = combo.filter(num => FIBONACCI_NUMBERS.includes(num)).length;
                    if (getSelectedOptions('fibonacciOptions').length > 0 && !getSelectedOptions('fibonacciOptions').includes(String(fibonacciCount))) {
                        return false;
                    }

                    const primosCount = combo.filter(num => PRIME_NUMBERS.includes(num)).length;
                    if (getSelectedOptions('primosOptions').length > 0 && !getSelectedOptions('primosOptions').includes(String(primosCount))) {
                        return false;
                    }

                    const molduraCount = combo.filter(num => MOLDURA_NUMBERS.includes(num)).length;
                    if (getSelectedOptions('molduraOptions').length > 0 && !getSelectedOptions('molduraOptions').includes(String(molduraCount))) {
                        return false;
                    }

                    const mioloCount = combo.filter(num => MIOLO_NUMBERS.includes(num)).length;
                    if (getSelectedOptions('mioloOptions').length > 0 && !getSelectedOptions('mioloOptions').includes(String(mioloCount))) {
                        return false;
                    }

                    const multiplos3Count = combo.filter(num => num % 3 === 0).length;
                    if (getSelectedOptions('multiplos3Options').length > 0 && !getSelectedOptions('multiplos3Options').includes(String(multiplos3Count))) {
                        return false;
                    }

                    const quadrantes = new Set();
                    combo.forEach(num => {
                        if (QUADRANT_1.includes(num)) quadrantes.add(1);
                        else if (QUADRANT_2.includes(num)) quadrantes.add(2);
                        else if (QUADRANT_3.includes(num)) quadrantes.add(3);
                        else if (QUADRANT_4.includes(num)) quadrantes.add(4);
                    });
                    if (getSelectedOptions('quadrantesOptions').length > 0 && !getSelectedOptions('quadrantesOptions').includes(String(quadrantes.size))) {
                        return false;
                    }

                    return true;
                });

                updateResultsDisplay();
                showSuccess('Filtros aplicados com sucesso!');
            } catch (error) {
                showError('Erro ao aplicar filtros: ' + error.message);
            } finally {
                applyButton.innerHTML = originalText;
                applyButton.disabled = false;
            }
        }

        function getSelectedOptions(filterId) {
            return Array.from(document.querySelector(`#${filterId}`).querySelectorAll('.filter-option.selected')).map(opt => opt.dataset.value);
        }

        function updateResultsDisplay() {
            const resultsDiv = document.getElementById('results');
            document.getElementById('filteredCount').textContent = filteredCombinations.length;
            resultsDiv.innerHTML = filteredCombinations.map(combo => `
                <div class="result-item">
                    ${combo.map(n => `<span class="number-ball">${n.toString().padStart(2, '0')}</span>`).join('')}
                </div>
            `).join('');
        }

        function resetFilters() {
            document.querySelectorAll('.filter-option').forEach(opt => opt.classList.remove('selected'));
            document.querySelector('#parImparOptions .filter-option[data-value="3-3"]').classList.add('selected');
            document.querySelectorAll('#somaOptions .filter-option[data-value="186-226"], #somaOptions .filter-option[data-value="145-185"]').forEach(opt => opt.classList.add('selected'));
            document.querySelector('#repetidasOptions .filter-option[data-value="1"]').classList.add('selected');
            document.querySelectorAll('#fibonacciOptions .filter-option[data-value="1"], #fibonacciOptions .filter-option[data-value="2"]').forEach(opt => opt.classList.add('selected'));
            document.querySelectorAll('#primosOptions .filter-option[data-value="1"], #primosOptions .filter-option[data-value="2"]').forEach(opt => opt.classList.add('selected'));
            document.querySelector('#molduraOptions .filter-option[data-value="3"]').classList.add('selected');
            document.querySelector('#mioloOptions .filter-option[data-value="3"]').classList.add('selected');
            document.querySelector('#multiplos3Options .filter-option[data-value="2"]').classList.add('selected');
            document.querySelectorAll('#quadrantesOptions .filter-option[data-value="3"], #quadrantesOptions .filter-option[data-value="4"]').forEach(opt => opt.classList.add('selected'));
            filteredCombinations = [...allCombinations];
            updateResultsDisplay();
            showSuccess('Filtros resetados com sucesso!');
        }

        async function checkResults() {
            const fileInput = document.getElementById('fileInput');
            const drawNumberInput = document.getElementById('drawNumber');
            const checkButton = document.getElementById('checkButton');

            if (!fileInput.files[0]) {
                showError('Selecione um arquivo com seus jogos.');
                return;
            }

            const originalButtonText = checkButton.innerHTML;
            checkButton.innerHTML = '<span class="loading"></span> Conferindo...';
            checkButton.disabled = true;

            try {
                const fileContent = await readFileAsText(fileInput.files[0]);
                const combinations = parseCombinations(fileContent);
                if (combinations.length === 0) {
                    showError('Nenhum jogo válido encontrado no arquivo.');
                    return;
                }

                let drawNumber = drawNumberInput.value ? parseInt(drawNumberInput.value) : null;
                let draw = drawNumber ? historicalData.find(d => d.numero === drawNumber) : historicalData[0];
                if (!draw && drawNumber) {
                    const response = await fetch(`https://servicebus2.caixa.gov.br/portaldeloterias/api/megasena/${drawNumber}`);
                    if (!response.ok) throw new Error(`Concurso ${drawNumber} não encontrado.`);
                    draw = await response.json();
                    historicalData.push(draw);
                    historicalData.sort((a, b) => b.numero - a.numero);
                }
                if (!draw) throw new Error('Nenhum sorteio disponível.');

                currentResults = processResults(combinations, draw);
                displayDrawInfo(draw);
                displayResults(currentResults, draw);
                document.getElementById('checkResults').classList.remove('hidden');
                showSuccess('Resultados conferidos com sucesso!');
            } catch (error) {
                showError(`Erro: ${error.message}`);
            } finally {
                checkButton.innerHTML = originalButtonText;
                checkButton.disabled = false;
            }
        }

        function readFileAsText(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = event => resolve(event.target.result);
                reader.onerror = error => reject(error);
                reader.readAsText(file);
            });
        }

        function parseCombinations(content) {
            return content.split('\n')
                .map(line => line.trim())
                .filter(line => {
                    // Ignora linhas vazias ou que não contêm apenas números e separadores
                    if (line.length === 0) return false;
                    // Ignora linhas de cabeçalho ou metadados
                    if (line.startsWith('Mega Sena') || line.startsWith('Dezenas Selecionadas')) return false;
                    return true;
                })
                .map(line => {
                    const numbers = line
                        .split(/[\s,-]+/)
                        .map(n => parseInt(n))
                        .filter(n => !isNaN(n) && n >= 1 && n <= 60);
                    // Aceita apenas combinações com exatamente 6 números
                    return numbers.length === 6 ? numbers : null;
                })
                .filter(comb => comb !== null);
        }

        function processResults(combinations, draw) {
            const drawNumbers = draw.listaDezenas.map(Number);
            return combinations.map(combination => ({
                numbers: combination,
                matches: combination.filter(n => drawNumbers.includes(n)).length,
                drawNumbers
            }));
        }

        function displayDrawInfo(draw) {
            const formattedDate = formatDateToDDMMYYYY(draw.dataApuracao);
            document.getElementById('drawResultDisplay').innerHTML = `
                <p><strong>Concurso:</strong> ${draw.numero}</p>
                <p><strong>Data:</strong> ${formattedDate}</p>
                <p><strong>Dezenas sorteadas:</strong> ${draw.listaDezenas.map(n => n.padStart(2, '0')).join(' ')}</p>
                <div>${draw.listaDezenas.map(n => `<span class="number-ball">${n}</span>`).join('')}</div>
            `;
        }

        function displayResults(results, draw) {
            const summary = { sena: 0, quina: 0, quadra: 0, terno: 0, duque: 0, as: 0, zero: 0 };
            const drawNumbers = draw.listaDezenas.map(Number);
            results.forEach(result => {
                const key = getResultKey(result.matches);
                summary[key]++;
            });

            const detailed = results.map((result, index) => `
                <div class="p-2 border-b">
                    Jogo ${index+1}:
                    ${result.numbers.map(n => {
                        const isMatch = drawNumbers.includes(n);
                        return `<span class="number-ball ${isMatch ? 'match' : ''}">${n.toString().padStart(2, '0')}</span>`;
                    }).join('')}
                    <span class="result-badge ${getResultClass(result.matches)}">${result.matches} acerto(s)</span>
                </div>
            `).join('');

            document.getElementById('detailedResults').innerHTML = detailed;
            document.getElementById('resultSummary').innerHTML = `
                <div class="stats-grid">
                    ${[6,5,4,3,2,1,0].map(matches => `
                        <div class="stat-item ${getResultClass(matches)}">
                            <span class="stat-count">${summary[getResultKey(matches)]}</span>
                            <span>${getResultLabel(matches)}</span>
                        </div>
                    `).join('')}
                </div>
                <p>Total de jogos conferidos: ${results.length}</p>
            `;
        }

        function exportToPDF() {
            if (!currentResults.length) {
                showError('Nenhum resultado para exportar.');
                return;
            }
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            const draw = historicalData.find(d => d.numero === parseInt(document.getElementById('drawNumber').value)) || historicalData[0];
            const formattedDate = formatDateToDDMMYYYY(draw.dataApuracao);

            doc.setFontSize(16);
            doc.text('Relatório de Conferência - Mega Sena', 15, 20);
            doc.setFontSize(12);
            doc.text(`Concurso: ${draw.numero}`, 15, 30);
            doc.text(`Data: ${formattedDate}`, 15, 37);
            doc.text(`Dezenas sorteadas: ${draw.listaDezenas.join(' ')}`, 15, 44);
            doc.text(`Dezenas Selecionadas: ${selectedNumbers.map(n => n.toString().padStart(2, '0')).join(', ')}`, 15, 51);

            const stats = currentResults.reduce((acc, result) => {
                acc[getResultKey(result.matches)]++;
                return acc;
            }, { sena: 0, quina: 0, quadra: 0, terno: 0, duque: 0, as: 0, zero: 0 });

            doc.text('Estatísticas:', 15, 65);
            let y = 72;
            [6,5,4,3,2,1,0].forEach(matches => {
                doc.text(`${getResultLabel(matches)}: ${stats[getResultKey(matches)]}`, 15, y);
                y += 7;
            });
            doc.text(`Total de jogos conferidos: ${currentResults.length}`, 15, y);

            const games = currentResults.map((result, index) => [
                index + 1,
                result.numbers.map(n => n.toString().padStart(2, '0')).join(' '),
                `${result.matches} acertos`
            ]);

            doc.autoTable({
                startY: y + 10,
                head: [['Jogo', 'Números', 'Acertos']],
                body: games,
                styles: { fontSize: 10 },
                headStyles: { fillColor: [0, 102, 204] }
            });

            doc.save(`conferencia_mega_sena_${draw.numero}.pdf`);
            showSuccess('PDF exportado com sucesso!');
        }

        function exportToTxtCheck() {
            if (!currentResults.length) {
                showError('Nenhum resultado para exportar.');
                return;
            }
            const draw = historicalData.find(d => d.numero === parseInt(document.getElementById('drawNumber').value)) || historicalData[0];
            const formattedDate = formatDateToDDMMYYYY(draw.dataApuracao);

            let txtContent = `CONFERÊNCIA MEGA SENA\n`;
            txtContent += `Concurso: ${draw.numero}\n`;
            txtContent += `Data: ${formattedDate}\n`;
            txtContent += `Dezenas sorteadas: ${draw.listaDezenas.join(' ')}\n`;
            txtContent += `Dezenas Selecionadas: ${selectedNumbers.map(n => n.toString().padStart(2, '0')).join(', ')}\n\n`;
            txtContent += `ESTATÍSTICAS:\n`;
            const stats = currentResults.reduce((acc, result) => {
                acc[getResultKey(result.matches)]++;
                return acc;
            }, { sena: 0, quina: 0, quadra: 0, terno: 0, duque: 0, as: 0, zero: 0 });
            [6,5,4,3,2,1,0].forEach(matches => {
                txtContent += `${getResultLabel(matches)}: ${stats[getResultKey(matches)]}\n`;
            });
            txtContent += `\nDETALHES DOS JOGOS:\n`;
            currentResults.forEach((result, index) => {
                txtContent += `Jogo ${index+1}: ${result.numbers.map(n => n.toString().padStart(2, '0')).join(' ')} | ${result.matches} acertos\n`;
            });

            const blob = new Blob([txtContent], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `conferencia_mega_sena_${draw.numero}.txt`;
            a.click();
            URL.revokeObjectURL(url);
            showSuccess('TXT exportado com sucesso!');
        }

        function exportToTxt() {
            if (filteredCombinations.length === 0) {
                showError('Nenhuma combinação para exportar!');
                return;
            }
            let txtContent = `Mega Sena Combinações\n`;
            txtContent += `Dezenas Selecionadas: ${selectedNumbers.map(n => n.toString().padStart(2, '0')).join(', ')}\n\n`;
            filteredCombinations.forEach(combo => {
                txtContent += `${combo.map(n => n.toString().padStart(2, '0')).join(' ')}\n`;
            });

            const blob = new Blob([txtContent], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            const now = new Date();
            const timestamp = `${now.getDate().toString().padStart(2, '0')}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getFullYear()}_${now.getHours().toString().padStart(2, '0')}_${now.getMinutes().toString().padStart(2, '0')}`;
            a.download = `mega_sena_combinacoes_${timestamp}.txt`;
            a.click();
            URL.revokeObjectURL(url);
            showSuccess('Combinações exportadas para TXT!');
        }

        function updateFileInfo() {
            const fileInput = document.getElementById('fileInput');
            const fileInfo = document.getElementById('fileInfo');
            fileInfo.textContent = fileInput.files.length > 0 ? fileInput.files[0].name : 'Nenhum arquivo selecionado';
        }

        function showError(message) {
            const errorContainer = document.getElementById('errorContainer');
            errorContainer.innerHTML = `<div class="error-message">${message}</div>`;
            errorContainer.classList.remove('hidden');
            setTimeout(() => errorContainer.classList.add('hidden'), 5000);
        }

        function showSuccess(message) {
            const errorContainer = document.getElementById('errorContainer');
            errorContainer.innerHTML = `<div class="success-message">${message}</div>`;
            errorContainer.classList.remove('hidden');
            setTimeout(() => errorContainer.classList.add('hidden'), 3000);
        }

        function getResultKey(matches) {
            return { 6: 'sena', 5: 'quina', 4: 'quadra', 3: 'terno', 2: 'duque', 1: 'as', 0: 'zero' }[matches] || 'zero';
        }

        function getResultClass(matches) {
            return getResultKey(matches);
        }

        function getResultLabel(matches) {
            return { 6: 'Sena', 5: 'Quina', 4: 'Quadra', 3: 'Terno', 2: 'Duque', 1: 'Ás', 0: 'Zero' }[matches] || 'Zero';
        }

        function formatDateToDDMMYYYY(dateString) {
            if (!dateString) return 'Data não disponível';
            const parts = dateString.match(/^(\d{4})-(\d{2})-(\d{2})$/) || dateString.match(/^(\d{2})\/(\d{2})\/(\d{4})$/);
            if (parts) {
                const [, year, month, day] = parts[0].includes('-') ? parts : [null, parts[3], parts[2], parts[1]];
                return `${day}/${month}/${year}`;
            }
            return 'Data não disponível';
        }
    </script>
</body>
</html>